package main

import (
	"bufio"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"sync"

	"github.com/fatih/color"
	"github.com/fractalbach/ninjaServer/commander"
	"github.com/fractalbach/ninjaServer/wshandle"
)

const Welcome = `
╔════════════════════════════════════════════════════════════════════╗
║                             Welcome to                             ║
║                         ~ The Tile Game ~                          ║
║                      Command Line Interface!                       ║
╚════════════════════════════════════════════════════════════════════╝
`

// ______________________________________________________________________
//			    Gameplay Stuff
// ======================================================================

const (
	// Pace refers to the number of milliseconds that it takes for
	// an entity to move 1 tile.
	PacePlayer     = 300
	PaceMonster    = 400
	PaceProjectile = 200

	// The number of tiles in each direction.
	GridSize = 30
)

var (
	uid      = 1
	gamegrid = [GridSize][GridSize]int{}
	ents     = NewEntMap()
)

func nextuid() int {
	uid++
	return uid
}

// Location refers to a square on the game grid.
type Location struct {
	X, Y int
}

// Entity is a person or thing that exists in the game grid.  It
// has a location and the ability to move around.  Can be a player,
// monster, or projetile.
type Entity struct {
	Kind    string
	Name    string
	Uid     int
	Pace    int
	Current Location
	Target  Location
	Health  int `json:",omitempty"`
}

// NewPlayer returns a default player character.
func NewPlayer(name string) *Entity {
	return &Entity{
		Kind:   "player",
		Name:   name,
		Uid:    nextuid(),
		Pace:   PacePlayer,
		Health: 100,
	}
}

type EntMap struct {
	mutex sync.Mutex
	data  map[int]Entity
}

func NewEntMap() *EntMap {
	return &EntMap{
		data: map[int]Entity{},
	}
}

func (em *EntMap) Add(e Entity) {
	em.mutex.Lock()
	em.data[e.Uid] = e
	em.mutex.Unlock()
}

// ______________________________________________________________________
//			    Game Commands
// ======================================================================

var helpMessage = `
List of Commands:

login <username>
logout <username>
grid
`

var fMap = map[string]interface{}{
	"grid":  Grid,
	"login": Login,
	"help":  Help,
}
var center = &commander.Center{FuncMap: fMap}

func Help() string {
	return helpMessage
}

func Grid() string {
	s := ""
	for _ = range gamegrid {
		for _ = range gamegrid {
			s += "."
		}
		s += "\n"
	}
	return s
}

func Login(name string) int {
	return 0
}

func Logout(name string) {
	return
}

// func Move(id, x, y int) {

// }

// func Projectile(id, x, y int) {

// }

// ______________________________________________________________________
// 			 Server Related Stuff
// ======================================================================

// default landing page if you arent connecting from the github page.
const page = `
<html><body>
<h1> Websocket Splash Page </h1>
<p>Hello there! Check your console!  Use the <code>ws.send()</code>
command to send a message! </p>
<script>
 var ws = new WebSocket("ws://" + location.host + "/ws");
 ws.onmessage = function(e) {console.log(e.data)};
 console.log(ws);
</script>
</body></html>
`

func messageWatcher(room *wshandle.ClientRoom) {
	for {
		select {
		case msg := <-room.Messages:
			s, _ := callSimple(string(msg.Data))
			log.Println(s)
			if client, ok := room.Client(msg.Id); ok {
				fmt.Fprintln(client, s)
			}
		}
	}
}

func callSimple(s string) (string, bool) {
	s = strings.TrimSpace(s)
	arr := strings.Split(s, " ")
	name := arr[0]
	if name == "" {
		return "please enter something.", false
	}
	args := []string{}
	if len(arr) > 1 {
		args = arr[1:]
	}
	result, err := center.CallWithStrings(name, args)
	if err != nil {
		return fmt.Sprintln(err), false
	}
	return fmt.Sprintln(result), true
}

func runServer() {
	room := wshandle.NewClientRoom()
	go messageWatcher(room)

	mux := http.NewServeMux()
	mux.HandleFunc("/", handle)
	mux.HandleFunc("/ws", room.Handle)
	s := &http.Server{
		Addr:    "localhost:8080",
		Handler: mux,
	}
	fmt.Println("listening and serving on", s.Addr)
	log.Fatal(s.ListenAndServe())
}

func handle(w http.ResponseWriter, r *http.Request) {
	log.Println(r.RemoteAddr, r.Method)
	fmt.Fprint(w, page)
}

func prompt() {
	color.Set(color.BgBlue)
	fmt.Print("[game]")
	color.Unset()
	fmt.Print(" ")
	color.Set(color.FgGreen)
	fmt.Print(">>>")
	color.Unset()
	fmt.Print(" ")
}

func printWelcome() {
	color.Set(color.FgHiMagenta)
	fmt.Print(Welcome)
	color.Unset()
}

func runStdin() {
	printWelcome()
	s := bufio.NewScanner(os.Stdin)
	prompt()
	for s.Scan() {
		line := s.Text()
		if line == "" {
			prompt()
			continue
		}
		result, ok := callSimple(line)
		if !ok {
			color.Set(color.FgRed)
			fmt.Println(result)
			color.Unset()
		} else {
			fmt.Println(result)
		}
		prompt()
	}
}

// ----------------------------------------------------------------------
// Command Line Flags and Main
// ----------------------------------------------------------------------

var (
	serverFlag     = false
	serverFlagHelp = "Run websocket server instead of command line."
)

func init() {
	flag.BoolVar(&serverFlag, "serve", false, serverFlagHelp)
}

func main() {
	if serverFlag {
		runServer()
	} else {
		runStdin()
	}
}
